version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  scan-by-lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: scan code
          command: |
            . venv/bin/activate
            make lint

  build-image:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/repo
    steps:
      - checkout
      # - restore_cache:
      #     key: npm-packages-{{ checksum "package-lock.json" }}
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      # - save_cache:
      #     key: npm-packages-{{ checksum "package-lock.json" }}
      #     paths:
      #       - ~/.npm

      - restore_cache:
          key: aws-cli-{{ arch }}
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION
      - save_cache:
          key: aws-cli-{{ arch }}
          paths:
            - ./aws

      - run:
          name: build-docker-image
          command: |
            export AWS_PAGER=""
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            aws ecr describe-repositories --repository-names $IMAGE_NAME_DOCKER || aws ecr create-repository \
              --repository-name $IMAGE_NAME_DOCKER \
              --image-scanning-configuration scanOnPush=true \
              --region $AWS_DEFAULT_REGION
            docker build -t hello-world .
            docker tag hello-world:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME_DOCKER
      - run:
          name: push-docker-image-to-ecr
          command: |
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME_DOCKER:latest

  deploy-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Setup aws cli
          command: |
            apk add --update tar gzip nodejs npm curl 
            pip install awscli
            aws --version
      - run:
          name: Iam authenticator
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator help
      - run:
          name: Setup eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl --help
            eksctl version
      - run:
          name: Setup kubectl
          command: |
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.25.9/2023-05-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client
      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - /usr/local/lib/python3.11/site-packages

      - run:
          name: Deploy cluster
          command: |
            eksctl create cluster \
            --name k8s-demo \
            --region $AWS_DEFAULT_REGION \
            --nodegroup-name k8s-demo \
            --nodes 2 \
            --ssh-access \
            --node-type t3.medium \
            --managed
      - run:
          name: Update kubectl config
          command: |
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name k8s-demo

  deploy-config:
    docker:
      - image: "cimg/base:stable"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: set-credential
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: k8s-demo
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: infrastructure/deployment.yml
          show-kubectl-command: true
      - run:
          name: check the status of the Load Balancer
          command: |
            kubectl get svc my-app-service
      - run:
          name: Testing deployments
          command: |
            kubectl get deployments
      - run:
          name: Testing pods
          command: |
            kubectl get pods
      - run:
          name: Testing services
          command: |
            kubectl get services
      - run:
          name: find the load balancer's IP address
          command: |
            kubectl describe services my-app-service

workflows:
  default:
    jobs:
      - scan-by-lint
      - build-image:
          requires: [scan-by-lint]
      - deploy-infrastructure:
          requires: [build-image]
      - deploy-config:
          requires: [deploy-infrastructure]
